curimg = imnoi;
alpha=0.5;

for passes = 1:3
    disp("pass number"+passes);
    for i=2:255
        for j=2:255
            xi = curimg(i,j);
            top = curimg(i-1,j);
            bottom = curimg(i+1,j);
            left = curimg(i,j-1);
            right = curimg(i,j+1);
            y=imnoi(i,j);


            %minimizing for each pixel..
            %quadratic prior and should use circshift
            %disp("current posterior "+ (alpha * (abs(imnoi(i,j) - xi))^2 + (1-alpha) * huberpriorsum(xi,curimg(i-1,j),curimg(i+1,j),curimg(i,j-1),curimg(i,j+1))));
            objective_pixel = @(xi) (alpha * (abs(y - xi))^2 + (1-alpha) * huberpriorsum(xi,top,bottom,left,right)) ;
            curimg(i,j) = fminbnd(objective_pixel,0,1);
            
            %Using gradient descent
            
            gradient_sum=0;
            if abs(center-top)<=gamma
                gradient_sum = gradient_sum+abs(center-top);
            else
                gradient_sum = gradient_sum+gamma*sign(center-top);
            end

            if abs(center-bottom)<=gamma
                gradient_sum = gradient_sum+abs(center-bottom);
            else
                gradient_sum = gradient_sum+gamma*sign(center-bottom);
            end

            if abs(center-left)<=gamma
                gradient_sum = gradient_sum+abs(center-left);
            else
                gradient_sum = gradient_sum+gamma*sign(center-left);
            end

            if abs(center-right)<=gamma
                gradient_sum = gradient_sum+abs(center-right);
            else
                gradient_sum = gradient_sum+gamma*sign(center-right);
            end
            
            xi = xi - st * (alpha*2*(xi-y) + (1-alpha)*gradient_sum);
            
            
            %disp("optimizied posterior "+ (alpha * (abs(imnoi(i,j) - curimg(i,j)))^2 + (1-alpha) * huberpriorsum(curimg(i,j),curimg(i-1,j),curimg(i+1,j),curimg(i,j-1),curimg(i,j+1))));

        end
    end
end


